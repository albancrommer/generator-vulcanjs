{"version":3,"sources":["../src/lib/ast.js"],"names":["esprima","require","escodegen","getLastImportIndex","tree","lastIndex","body","forEach","node","index","type","addImportStatement","statement","newTree","nextImportIndex","importNode","parseModule","slice","length","addImportStatementAndParse","fileText","fileAst","range","tokens","comment","fileAstWithImport","fileWithImport","generate","format","indent","style","module","exports"],"mappings":";;AAAA,MAAMA,UAAUC,QAAQ,SAAR,CAAhB;AACA,MAAMC,YAAYD,QAAQ,mBAAR,CAAlB;;AAEA,MAAME,qBAAsBC,IAAD,IAAU;AACnC,MAAIC,YAAY,CAAC,CAAjB;AACAD,OAAKE,IAAL,CAAUC,OAAV,CAAkB,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACjC,QAAID,KAAKE,IAAL,KAAc,mBAAlB,EAAuC;AACrCL,kBAAYI,KAAZ;AACD;AACF,GAJD;AAKA,SAAOJ,SAAP;AACD,CARD;;AAUA,MAAMM,qBAAqB,CAACP,IAAD,EAAOQ,SAAP,KAAqB;AAC9C,QAAMC,uBAAeT,IAAf,CAAN;AACA,QAAMU,kBAAkBX,mBAAmBC,IAAnB,IAA2B,CAAnD;AACA,QAAMW,aAAaf,QAAQgB,WAAR,CAAoBJ,SAApB,CAAnB;AACAC,UAAQP,IAAR,GAAe,CACb,GAAG,CAAC,GAAGF,KAAKE,IAAT,EAAeW,KAAf,CAAqB,CAArB,EAAwBH,eAAxB,CADU,EAEbC,WAAWT,IAAX,CAAgB,CAAhB,CAFa,EAGb,GAAG,CAAC,GAAGF,KAAKE,IAAT,EAAeW,KAAf,CAAqBH,eAArB,EAAsCD,QAAQP,IAAR,CAAaY,MAAnD,CAHU,CAAf;AAKA,SAAOL,OAAP;AACD,CAVD;;AAYA,MAAMM,6BAA6B,CAACC,QAAD,EAAWR,SAAX,KAAyB;AAC1D,QAAMS,UAAUrB,QAAQgB,WAAR,CAAoBI,QAApB,EAA8B;AAC5CE,WAAO,IADqC;AAE5CC,YAAQ,IAFoC;AAG5CC,aAAS;AAHmC,GAA9B,CAAhB;AAKA,QAAMC,oBAAoBd,mBAAmBU,OAAnB,EAA4BT,SAA5B,CAA1B;AACA,QAAMc,iBAAiBxB,UAAUyB,QAAV,CACrBF,iBADqB,EAErB,EAAED,SAAS,IAAX,EAAiBI,QAAQ,EAAEC,QAAQ,EAAEC,OAAO,IAAT,EAAV,EAAzB,EAFqB,CAAvB;AAIA,SAAOJ,cAAP;AACD,CAZD;;AAcAK,OAAOC,OAAP,GAAiB;AACf7B,wCADe;AAEfQ,wCAFe;AAGfQ;AAHe,CAAjB","file":"ast.js","sourcesContent":["const esprima = require('esprima');\nconst escodegen = require('escodegen-wallaby');\n\nconst getLastImportIndex = (tree) => {\n  let lastIndex = -1;\n  tree.body.forEach((node, index) => {\n    if (node.type === 'ImportDeclaration') {\n      lastIndex = index;\n    }\n  });\n  return lastIndex;\n};\n\nconst addImportStatement = (tree, statement) => {\n  const newTree = { ...tree };\n  const nextImportIndex = getLastImportIndex(tree) + 1;\n  const importNode = esprima.parseModule(statement);\n  newTree.body = [\n    ...[...tree.body].slice(0, nextImportIndex),\n    importNode.body[0],\n    ...[...tree.body].slice(nextImportIndex, newTree.body.length),\n  ];\n  return newTree;\n};\n\nconst addImportStatementAndParse = (fileText, statement) => {\n  const fileAst = esprima.parseModule(fileText, {\n    range: true,\n    tokens: true,\n    comment: true,\n  });\n  const fileAstWithImport = addImportStatement(fileAst, statement);\n  const fileWithImport = escodegen.generate(\n    fileAstWithImport,\n    { comment: true, format: { indent: { style: '  ' } } }\n  );\n  return fileWithImport;\n};\n\nmodule.exports = {\n  getLastImportIndex,\n  addImportStatement,\n  addImportStatementAndParse,\n};\n"]}