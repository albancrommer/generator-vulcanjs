{"version":3,"sources":["../../src/generators/module/index.js"],"names":["pascalCase","require","camelCase","VulcanGenerator","ast","module","exports","initializing","_assertIsVulcan","_assertHasNonZeroPackages","inputProps","_registerArguments","_registerPackageNameOption","_registerModuleNameOption","prompting","_canPrompt","questions","_getPackageNameListQuestion","_getModuleNameInputQuestion","_getModuleCreateWithQuestion","_getDefaultResolversQuestion","prompt","then","answers","packageName","_filterPackageName","moduleName","_filterModuleName","camelModuleName","pascalModuleName","props","collectionName","typeName","newMutationName","newPermission","editMutationName","editOwnPermission","editAllPermission","removeMutationName","removeOwnPermission","removeAllPermission","parametersName","listResolverName","singleResolverName","totalResolverName","moduleParts","resolvers","defaultResolvers","hasListResolver","list","hasSingleResolver","single","hasTotalResolver","total","_assertIsPackageExists","_assertModuleNotExists","configuring","_canConfigure","_dispatch","type","_commitStore","_writeCollection","fs","copyTpl","templatePath","_getModulePath","isAbsolute","_writeTestCollection","testCollectionProps","subjectName","subjectPath","_getModuleTestPath","_writeResolvers","_writeTestResolvers","_writeFragments","fragments","_writeTestFragments","_writeMutations","mutations","_writeTestMutations","_writeParameters","parameters","_writeTestParameters","_writePermissions","permissions","_writeTestPermissions","_writeSchema","schema","_writeTestSchema","_writeStories","_getModuleStoriesPath","_updateModulesIndex","modulePath","_getModulesPath","fileText","read","fileWithImportText","addImportStatementAndParse","write","_updatePackageStories","packageStoriesPath","_getPackageStoriesPath","_writeAllCode","_writeAllTests","_updateAllCode","writing","_canWrite","end","_end"],"mappings":"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","file":"index.js","sourcesContent":["const pascalCase = require('pascal-case');\nconst camelCase = require('camelcase');\nconst VulcanGenerator = require('../../lib/VulcanGenerator');\nconst ast = require('../../lib/ast');\n\nmodule.exports = class extends VulcanGenerator {\n  initializing () {\n    this._assertIsVulcan();\n    this._assertHasNonZeroPackages();\n    this.inputProps = {};\n  }\n\n  _registerArguments () {\n    this._registerPackageNameOption();\n    this._registerModuleNameOption();\n  }\n\n  prompting () {\n    if (!this._canPrompt()) { return false; }\n    const questions = [\n      this._getPackageNameListQuestion(),\n      this._getModuleNameInputQuestion(),\n      this._getModuleCreateWithQuestion(),\n      this._getDefaultResolversQuestion(),\n    ];\n\n    return this.prompt(questions)\n    .then((answers) => {\n      const packageName = this._filterPackageName(\n        this.inputProps.packageName ||\n        answers.packageName\n      );\n      const moduleName = this._filterModuleName(this.inputProps.moduleName || answers.moduleName);\n      const camelModuleName = camelCase(moduleName);\n      const pascalModuleName = pascalCase(moduleName);\n      this.props = {\n        packageName,\n        moduleName,\n        collectionName: pascalModuleName,\n        typeName: pascalModuleName,\n        newMutationName: `${camelModuleName}New`,\n        newPermission: `${camelModuleName}.new`,\n        editMutationName: `${camelModuleName}Edit`,\n        editOwnPermission: `${camelModuleName}.edit.own`,\n        editAllPermission: `${camelModuleName}.edit.all`,\n        removeMutationName: `${camelModuleName}Remove`,\n        removeOwnPermission: `${camelModuleName}.remove.own`,\n        removeAllPermission: `${camelModuleName}.remove.all`,\n        parametersName: `${camelModuleName}.parameters`,\n        listResolverName: `${camelModuleName}List`,\n        singleResolverName: `${camelModuleName}Single`,\n        totalResolverName: `${camelModuleName}Total`,\n        moduleParts: this.inputProps.moduleParts || answers.moduleParts,\n      };\n\n      if (this.props.moduleParts.resolvers) {\n        const defaultResolvers = this.inputProps.defaultResolvers || answers.defaultResolvers;\n        this.props.hasListResolver = defaultResolvers.list;\n        this.props.hasSingleResolver = defaultResolvers.single;\n        this.props.hasTotalResolver = defaultResolvers.total;\n      }\n      this._assertIsPackageExists(this.props.packageName);\n      this._assertModuleNotExists(this.props.packageName, this.props.moduleName);\n    });\n  }\n\n  configuring () {\n    if (!this._canConfigure()) { return; }\n    this._dispatch({\n      type: 'ADD_MODULE',\n      packageName: this.props.packageName,\n      moduleName: this.props.moduleName,\n    });\n    this._commitStore();\n  }\n\n  _writeCollection () {\n    this.fs.copyTpl(\n      this.templatePath('collection.js'),\n      this._getModulePath({ isAbsolute: true }, 'collection.js'),\n      this.props\n    );\n  }\n\n  _writeTestCollection () {\n    const testCollectionProps = {\n      ...this.props,\n      subjectName: 'collection',\n      subjectPath: '../collection',\n    };\n    this.fs.copyTpl(\n      this.templatePath('tests/generic.js'),\n      this._getModuleTestPath({ isAbsolute: true }, 'collection.js'),\n      testCollectionProps\n    );\n  }\n\n  _writeResolvers () {\n    if (!this.props.moduleParts.resolvers) { return; }\n    this.fs.copyTpl(\n      this.templatePath('resolvers.js'),\n      this._getModulePath({ isAbsolute: true }, 'resolvers.js'),\n      this.props\n    );\n  }\n\n  _writeTestResolvers () {\n    const testCollectionProps = {\n      ...this.props,\n      subjectName: 'resolvers',\n      subjectPath: '../resolvers',\n    };\n    this.fs.copyTpl(\n      this.templatePath('tests/generic.js'),\n      this._getModuleTestPath({ isAbsolute: true }, 'resolvers.js'),\n      testCollectionProps\n    );\n  }\n\n  _writeFragments () {\n    if (!this.props.moduleParts.fragments) { return; }\n    this.fs.copyTpl(\n      this.templatePath('fragments.js'),\n      this._getModulePath({ isAbsolute: true }, 'fragments.js'),\n      this.props\n    );\n  }\n\n  _writeTestFragments () {\n    const testCollectionProps = {\n      ...this.props,\n      subjectName: 'fragments',\n      subjectPath: '../fragments',\n    };\n    this.fs.copyTpl(\n      this.templatePath('tests/generic.js'),\n      this._getModuleTestPath({ isAbsolute: true }, 'fragments.js'),\n      testCollectionProps\n    );\n  }\n\n  _writeMutations () {\n    if (!this.props.moduleParts.mutations) { return; }\n    this.fs.copyTpl(\n      this.templatePath('mutations.js'),\n      this._getModulePath({ isAbsolute: true }, 'mutations.js'),\n      this.props\n    );\n  }\n\n  _writeTestMutations () {\n    const testCollectionProps = {\n      ...this.props,\n      subjectName: 'mutations',\n      subjectPath: '../mutations',\n    };\n    this.fs.copyTpl(\n      this.templatePath('tests/generic.js'),\n      this._getModuleTestPath({ isAbsolute: true }, 'mutations.js'),\n      testCollectionProps\n    );\n  }\n\n  _writeParameters () {\n    if (!this.props.moduleParts.parameters) { return; }\n    this.fs.copyTpl(\n      this.templatePath('parameters.js'),\n      this._getModulePath({ isAbsolute: true }, 'parameters.js'),\n      this.props\n    );\n  }\n\n  _writeTestParameters () {\n    const testCollectionProps = {\n      ...this.props,\n      subjectName: 'parameters',\n      subjectPath: '../parameters',\n    };\n    this.fs.copyTpl(\n      this.templatePath('tests/generic.js'),\n      this._getModuleTestPath({ isAbsolute: true }, 'parameters.js'),\n      testCollectionProps\n    );\n  }\n\n  _writePermissions () {\n    if (!this.props.moduleParts.permissions) { return; }\n    this.fs.copyTpl(\n      this.templatePath('permissions.js'),\n      this._getModulePath({ isAbsolute: true }, 'permissions.js'),\n      this.props\n    );\n  }\n\n  _writeTestPermissions () {\n    const testCollectionProps = {\n      ...this.props,\n      subjectName: 'permissions',\n      subjectPath: '../permissions',\n    };\n    this.fs.copyTpl(\n      this.templatePath('tests/generic.js'),\n      this._getModuleTestPath({ isAbsolute: true }, 'permissions.js'),\n      testCollectionProps\n    );\n  }\n\n  _writeSchema () {\n    if (!this.props.moduleParts.schema) { return; }\n    this.fs.copyTpl(\n      this.templatePath('schema.js'),\n      this._getModulePath({ isAbsolute: true }, 'schema.js'),\n      this.props\n    );\n  }\n\n  _writeTestSchema () {\n    const testCollectionProps = {\n      ...this.props,\n      subjectName: 'schema',\n      subjectPath: '../scjema',\n    };\n    this.fs.copyTpl(\n      this.templatePath('tests/generic.js'),\n      this._getModuleTestPath({ isAbsolute: true }, 'schema.js'),\n      testCollectionProps\n    );\n  }\n\n  _writeStories () {\n    this.fs.copyTpl(\n      this.templatePath('stories.js'),\n      this._getModuleStoriesPath({ isAbsolute: true }),\n      this.props\n    );\n  }\n\n  _updateModulesIndex () {\n    const modulePath = this._getModulesPath({ isAbsolute: true }, 'index.js');\n    const fileText = this.fs.read(modulePath);\n    const fileWithImportText = ast.addImportStatementAndParse(\n      fileText,\n      `import './${this.props.moduleName}/collection.js';`\n    );\n    this.fs.write(\n      modulePath,\n      fileWithImportText\n    );\n  }\n\n  _updatePackageStories () {\n    const packageStoriesPath = this._getPackageStoriesPath({\n      isAbsolute: true,\n    });\n    const fileText = this.fs.read(packageStoriesPath);\n    const fileWithImportText = ast.addImportStatementAndParse(\n      fileText,\n      `import './${this.props.moduleName}/.stories.js';`\n    );\n    this.fs.write(\n      packageStoriesPath,\n      fileWithImportText\n    );\n  }\n\n  _writeAllCode () {\n    this._writeCollection();\n    this._writeResolvers();\n    this._writeFragments();\n    this._writeMutations();\n    this._writeParameters();\n    this._writePermissions();\n    this._writeSchema();\n    // this._writeStories();\n  }\n\n  _writeAllTests () {\n    this._writeTestCollection();\n    this._writeTestResolvers();\n    this._writeTestFragments();\n    this._writeTestMutations();\n    this._writeTestParameters();\n    this._writeTestPermissions();\n    this._writeTestSchema();\n  }\n\n  _updateAllCode () {\n    this._updateModulesIndex();\n    // this._updatePackageStories();\n  }\n\n  writing () {\n    if (!this._canWrite()) { return; }\n    this._writeAllCode();\n    this._writeAllTests();\n    this._updateAllCode();\n  }\n\n  end () {\n    this._end();\n  }\n};\n"]}